[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mealie-recipe-translator"
version = "1.0.0"
authors = [
    {name = "Oliver Lipkau", email = "oliver@lipkau.net"},
]
description = "A Python application that translates Mealie recipes using OpenAI's ChatGPT API"
readme = "README.md"
license = {text = "MIT"}
keywords = ["mealie", "recipe", "translation", "openai", "chatgpt"]
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Home Automation",
    "Topic :: Text Processing :: Linguistic",
]
dependencies = [
    "requests>=2.31.0",
    "openai>=1.3.0",
    "httpx>=0.25.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
]

[project.urls]
homepage = "https://github.com/lipkau/mealie_translate"
repository = "https://github.com/lipkau/mealie_translate"
documentation = "https://github.com/lipkau/mealie_translate#readme"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-html>=3.2.0",
    "responses>=0.23.0",
    "coverage>=7.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "pip-audit>=2.6.0",
]

[project.scripts]
mealie-translate = "mealie_translate.main:main"

[tool.setuptools.packages.find]
where = ["."]

[tool.setuptools.package-dir]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
pythonpath = [
    ".",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests that require live API connections",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["mealie_translate"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Note: Type checking is handled by pyright (see pyrightconfig.json)
# Pyright is faster and integrates better with VS Code/Pylance

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".ruff_cache",
    "htmlcov",
    ".coverage",
    ".pytest_cache",
    "node_modules",
    ".venv",
    "dist",
    "build",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable the pycodestyle (`E`) and Pyflakes (`F`) rules by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "D",  # pydocstyle (docstrings)
]
ignore = [
    "E501",  # line too long, handled by formatter
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "E402",  # Module level import not at top of file (for sys.path manipulation)
    "F841",  # Local variable assigned to but never used (for mocked variables)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
