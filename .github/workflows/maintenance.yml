name: Maintenance

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  cleanup-old-images:
    name: Cleanup Old Development Images
    runs-on: ubuntu-latest
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Delete dev images older than 7 days (keep recent ones for debugging)
      - name: Delete old dev images
        run: |
          echo "üßπ Starting scheduled cleanup of old development images..."

          # Extract repository name from full repository path
          REPO_NAME="${{ github.event.repository.name }}"
          echo "Repository: ${{ github.repository_owner }}/$REPO_NAME"

          # Check if any container packages exist for this organization
          echo "Checking if container packages exist..."
          PACKAGES_RESPONSE=$(gh api -H "Accept: application/vnd.github.v3+json" \
            "/orgs/${{ github.repository_owner }}/packages?package_type=container" 2>/dev/null || echo "[]")

          if [[ "$PACKAGES_RESPONSE" == "[]" ]] || [[ -z "$PACKAGES_RESPONSE" ]]; then
            echo "‚ÑπÔ∏è  No container packages found for this organization yet"
            echo "This is normal if no Docker images have been published through CI/CD"
            exit 0
          fi

          # Filter for packages matching this repository name
          REPO_PACKAGES=$(echo "$PACKAGES_RESPONSE" | jq -r --arg repo "$REPO_NAME" '.[] | select(.name == $repo) | .name' || echo "")

          if [[ -z "$REPO_PACKAGES" ]]; then
            echo "‚ÑπÔ∏è  No container packages found for repository '$REPO_NAME'"
            echo "This is normal if Docker images haven't been published for this repository yet"
            exit 0
          fi

          # Get all package versions (images) for this repository
          echo "Fetching package versions..."
          PACKAGES_JSON=$(gh api -H "Accept: application/vnd.github.v3+json" \
            "/orgs/${{ github.repository_owner }}/packages/container/$REPO_NAME/versions?per_page=100" 2>/dev/null || echo "[]")

          if [[ "$PACKAGES_JSON" == "[]" ]]; then
            echo "‚ÑπÔ∏è  No package versions found"
            exit 0
          fi

          # Filter for development images
          PACKAGES=$(echo "$PACKAGES_JSON" | jq -c '.[] | select(.metadata.container.tags[]? | test("^(dev|pr-.*-dev)$")) | {id: .id, tags: .metadata.container.tags, created: .created_at}')

          if [[ -z "$PACKAGES" ]]; then
            echo "‚ÑπÔ∏è  No development images found"
            exit 0
          fi

          # Calculate cutoff date (7 days ago)
          CUTOFF_DATE=$(date -d '7 days ago' -u +%Y-%m-%dT%H:%M:%SZ)

          echo "Cutoff date: $CUTOFF_DATE"
          echo "Found development images:"
          echo "$PACKAGES" | jq -r '. | "ID: \(.id), Tags: \(.tags | join(", ")), Created: \(.created)"'

          # Delete images older than cutoff
          OLD_IMAGES=$(echo "$PACKAGES" | jq -r --arg cutoff "$CUTOFF_DATE" 'select(.created < $cutoff) | .id')

          if [[ -z "$OLD_IMAGES" ]]; then
            echo "‚úÖ No old development images found to delete"
          else
            echo "üóëÔ∏è  Deleting old development images:"
            DELETED_COUNT=0
            for IMAGE_ID in $OLD_IMAGES; do
              echo "Deleting image ID: $IMAGE_ID"
              if gh api --method DELETE -H "Accept: application/vnd.github.v3+json" \
                "/orgs/${{ github.repository_owner }}/packages/container/$REPO_NAME/versions/$IMAGE_ID" 2>/dev/null; then
                ((DELETED_COUNT++))
                echo "‚úÖ Successfully deleted image ID: $IMAGE_ID"
              else
                echo "‚ö†Ô∏è  Failed to delete image ID: $IMAGE_ID"
              fi
            done
            echo "‚úÖ Cleanup completed - deleted $DELETED_COUNT images"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
